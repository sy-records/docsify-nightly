{"version":3,"file":"front-matter.min.js","sources":["../../src/plugins/front-matter/yaml.js","../../src/plugins/front-matter/parser.js","../../src/plugins/front-matter/index.js"],"sourcesContent":["/**\n * Forked from https://github.com/egoist/docute/blob/master/src/utils/yaml.js\n */\n/* eslint-disable */\n/*\nYAML parser for Javascript\nAuthor: Diogo Costa\nThis program is released under the MIT License as follows:\nCopyright (c) 2011 Diogo Costa (costa.h4evr@gmail.com)\nPermission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n*/\n\n/**\n * @name YAML\n * @namespace\n */\n\nvar errors = [],\n  reference_blocks = [],\n  processing_time = 0,\n  regex = {\n    regLevel: new RegExp('^([\\\\s\\\\-]+)'),\n    invalidLine: new RegExp('^\\\\-\\\\-\\\\-|^\\\\.\\\\.\\\\.|^\\\\s*#.*|^\\\\s*$'),\n    dashesString: new RegExp('^\\\\s*\\\\\"([^\\\\\"]*)\\\\\"\\\\s*$'),\n    quotesString: new RegExp(\"^\\\\s*\\\\'([^\\\\']*)\\\\'\\\\s*$\"),\n    float: new RegExp('^[+-]?[0-9]+\\\\.[0-9]+(e[+-]?[0-9]+(\\\\.[0-9]+)?)?$'),\n    integer: new RegExp('^[+-]?[0-9]+$'),\n    array: new RegExp('\\\\[\\\\s*(.*)\\\\s*\\\\]'),\n    map: new RegExp('\\\\{\\\\s*(.*)\\\\s*\\\\}'),\n    key_value: new RegExp('([a-z0-9_-][ a-z0-9_-]*):( .+)', 'i'),\n    single_key_value: new RegExp('^([a-z0-9_-][ a-z0-9_-]*):( .+?)$', 'i'),\n    key: new RegExp('([a-z0-9_-][ a-z0-9_-]+):( .+)?', 'i'),\n    item: new RegExp('^-\\\\s+'),\n    trim: new RegExp('^\\\\s+|\\\\s+$'),\n    comment: new RegExp(\n      '([^\\\\\\'\\\\\"#]+([\\\\\\'\\\\\"][^\\\\\\'\\\\\"]*[\\\\\\'\\\\\"])*)*(#.*)?',\n    ),\n  };\n\n/**\n * @class A block of lines of a given level.\n * @param {int} lvl The block's level.\n * @private\n */\nfunction Block(lvl) {\n  return {\n    /* The block's parent */\n    parent: null,\n    /* Number of children */\n    length: 0,\n    /* Block's level */\n    level: lvl,\n    /* Lines of code to process */\n    lines: [],\n    /* Blocks with greater level */\n    children: [],\n    /* Add a block to the children collection */\n    addChild: function (obj) {\n      this.children.push(obj);\n      obj.parent = this;\n      ++this.length;\n    },\n  };\n}\n\nfunction parser(str) {\n  var regLevel = regex['regLevel'];\n  var invalidLine = regex['invalidLine'];\n  var lines = str.split('\\n');\n  var m;\n  var level = 0,\n    curLevel = 0;\n\n  var blocks = [];\n\n  var result = new Block(-1);\n  var currentBlock = new Block(0);\n  result.addChild(currentBlock);\n  var levels = [];\n  var line = '';\n\n  blocks.push(currentBlock);\n  levels.push(level);\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n\n    if (line.match(invalidLine)) {\n      continue;\n    }\n\n    if ((m = regLevel.exec(line))) {\n      level = m[1].length;\n    } else level = 0;\n\n    if (level > curLevel) {\n      var oldBlock = currentBlock;\n      currentBlock = new Block(level);\n      oldBlock.addChild(currentBlock);\n      blocks.push(currentBlock);\n      levels.push(level);\n    } else if (level < curLevel) {\n      var added = false;\n\n      var k = levels.length - 1;\n      for (; k >= 0; --k) {\n        if (levels[k] == level) {\n          currentBlock = new Block(level);\n          blocks.push(currentBlock);\n          levels.push(level);\n          if (blocks[k].parent != null) blocks[k].parent.addChild(currentBlock);\n          added = true;\n          break;\n        }\n      }\n\n      if (!added) {\n        errors.push('Error: Invalid indentation at line ' + i + ': ' + line);\n        return;\n      }\n    }\n\n    currentBlock.lines.push(line.replace(regex['trim'], ''));\n    curLevel = level;\n  }\n\n  return result;\n}\n\nfunction processValue(val) {\n  val = val.replace(regex['trim'], '');\n  var m = null;\n\n  if (val == 'true') {\n    return true;\n  } else if (val == 'false') {\n    return false;\n  } else if (val == '.NaN') {\n    return Number.NaN;\n  } else if (val == 'null') {\n    return null;\n  } else if (val == '.inf') {\n    return Number.POSITIVE_INFINITY;\n  } else if (val == '-.inf') {\n    return Number.NEGATIVE_INFINITY;\n  } else if ((m = val.match(regex['dashesString']))) {\n    return m[1];\n  } else if ((m = val.match(regex['quotesString']))) {\n    return m[1];\n  } else if ((m = val.match(regex['float']))) {\n    return parseFloat(m[0]);\n  } else if ((m = val.match(regex['integer']))) {\n    return parseInt(m[0]);\n  } else if (!isNaN((m = Date.parse(val)))) {\n    return new Date(m);\n  } else if ((m = val.match(regex['single_key_value']))) {\n    var res = {};\n    res[m[1]] = processValue(m[2]);\n    return res;\n  } else if ((m = val.match(regex['array']))) {\n    var count = 0,\n      c = ' ';\n    var res = [];\n    var content = '';\n    var str = false;\n    for (var j = 0, lenJ = m[1].length; j < lenJ; ++j) {\n      c = m[1][j];\n      if (c == \"'\" || c == '\"') {\n        if (str === false) {\n          str = c;\n          content += c;\n          continue;\n        } else if ((c == \"'\" && str == \"'\") || (c == '\"' && str == '\"')) {\n          str = false;\n          content += c;\n          continue;\n        }\n      } else if (str === false && (c == '[' || c == '{')) {\n        ++count;\n      } else if (str === false && (c == ']' || c == '}')) {\n        --count;\n      } else if (str === false && count == 0 && c == ',') {\n        res.push(processValue(content));\n        content = '';\n        continue;\n      }\n\n      content += c;\n    }\n\n    if (content.length > 0) res.push(processValue(content));\n    return res;\n  } else if ((m = val.match(regex['map']))) {\n    var count = 0,\n      c = ' ';\n    var res = [];\n    var content = '';\n    var str = false;\n    for (var j = 0, lenJ = m[1].length; j < lenJ; ++j) {\n      c = m[1][j];\n      if (c == \"'\" || c == '\"') {\n        if (str === false) {\n          str = c;\n          content += c;\n          continue;\n        } else if ((c == \"'\" && str == \"'\") || (c == '\"' && str == '\"')) {\n          str = false;\n          content += c;\n          continue;\n        }\n      } else if (str === false && (c == '[' || c == '{')) {\n        ++count;\n      } else if (str === false && (c == ']' || c == '}')) {\n        --count;\n      } else if (str === false && count == 0 && c == ',') {\n        res.push(content);\n        content = '';\n        continue;\n      }\n\n      content += c;\n    }\n\n    if (content.length > 0) res.push(content);\n\n    var newRes = {};\n    for (var j = 0, lenJ = res.length; j < lenJ; ++j) {\n      if ((m = res[j].match(regex['key_value']))) {\n        newRes[m[1]] = processValue(m[2]);\n      }\n    }\n\n    return newRes;\n  } else return val;\n}\n\nfunction processFoldedBlock(block) {\n  var lines = block.lines;\n  var children = block.children;\n  var str = lines.join(' ');\n  var chunks = [str];\n  for (var i = 0, len = children.length; i < len; ++i) {\n    chunks.push(processFoldedBlock(children[i]));\n  }\n  return chunks.join('\\n');\n}\n\nfunction processLiteralBlock(block) {\n  var lines = block.lines;\n  var children = block.children;\n  var str = lines.join('\\n');\n  for (var i = 0, len = children.length; i < len; ++i) {\n    str += processLiteralBlock(children[i]);\n  }\n  return str;\n}\n\nfunction processBlock(blocks) {\n  var m = null;\n  var res = {};\n  var lines = null;\n  var children = null;\n  var currentObj = null;\n\n  var level = -1;\n\n  var processedBlocks = [];\n\n  var isMap = true;\n\n  for (var j = 0, lenJ = blocks.length; j < lenJ; ++j) {\n    if (level != -1 && level != blocks[j].level) continue;\n\n    processedBlocks.push(j);\n\n    level = blocks[j].level;\n    lines = blocks[j].lines;\n    children = blocks[j].children;\n    currentObj = null;\n\n    for (var i = 0, len = lines.length; i < len; ++i) {\n      var line = lines[i];\n\n      if ((m = line.match(regex['key']))) {\n        var key = m[1];\n\n        if (key[0] == '-') {\n          key = key.replace(regex['item'], '');\n          if (isMap) {\n            isMap = false;\n            if (typeof res.length === 'undefined') {\n              res = [];\n            }\n          }\n          if (currentObj != null) res.push(currentObj);\n          currentObj = {};\n          isMap = true;\n        }\n\n        if (typeof m[2] != 'undefined') {\n          var value = m[2].replace(regex['trim'], '');\n          if (value[0] == '&') {\n            var nb = processBlock(children);\n            if (currentObj != null) currentObj[key] = nb;\n            else res[key] = nb;\n            reference_blocks[value.substr(1)] = nb;\n          } else if (value[0] == '|') {\n            if (currentObj != null)\n              currentObj[key] = processLiteralBlock(children.shift());\n            else res[key] = processLiteralBlock(children.shift());\n          } else if (value[0] == '*') {\n            var v = value.substr(1);\n            var no = {};\n\n            if (typeof reference_blocks[v] == 'undefined') {\n              errors.push(\"Reference '\" + v + \"' not found!\");\n            } else {\n              for (var k in reference_blocks[v]) {\n                no[k] = reference_blocks[v][k];\n              }\n\n              if (currentObj != null) currentObj[key] = no;\n              else res[key] = no;\n            }\n          } else if (value[0] == '>') {\n            if (currentObj != null)\n              currentObj[key] = processFoldedBlock(children.shift());\n            else res[key] = processFoldedBlock(children.shift());\n          } else {\n            if (currentObj != null) currentObj[key] = processValue(value);\n            else res[key] = processValue(value);\n          }\n        } else {\n          if (currentObj != null) currentObj[key] = processBlock(children);\n          else res[key] = processBlock(children);\n        }\n      } else if (line.match(/^-\\s*$/)) {\n        if (isMap) {\n          isMap = false;\n          if (typeof res.length === 'undefined') {\n            res = [];\n          }\n        }\n        if (currentObj != null) res.push(currentObj);\n        currentObj = {};\n        isMap = true;\n        continue;\n      } else if ((m = line.match(/^-\\s*(.*)/))) {\n        if (currentObj != null) currentObj.push(processValue(m[1]));\n        else {\n          if (isMap) {\n            isMap = false;\n            if (typeof res.length === 'undefined') {\n              res = [];\n            }\n          }\n          res.push(processValue(m[1]));\n        }\n        continue;\n      }\n    }\n\n    if (currentObj != null) {\n      if (isMap) {\n        isMap = false;\n        if (typeof res.length === 'undefined') {\n          res = [];\n        }\n      }\n      res.push(currentObj);\n    }\n  }\n\n  for (var j = processedBlocks.length - 1; j >= 0; --j) {\n    blocks.splice.call(blocks, processedBlocks[j], 1);\n  }\n\n  return res;\n}\n\nfunction semanticAnalysis(blocks) {\n  var res = processBlock(blocks.children);\n  return res;\n}\n\nfunction preProcess(src) {\n  var m;\n  var lines = src.split('\\n');\n\n  var r = regex['comment'];\n\n  for (var i in lines) {\n    if ((m = lines[i].match(r))) {\n      /*                var cmt = \"\";\n            if(typeof m[3] != \"undefined\")\n                lines[i] = m[1];\n            else if(typeof m[3] != \"undefined\")\n                lines[i] = m[3];\n            else\n                lines[i] = \"\";\n                */\n      if (typeof m[3] !== 'undefined') {\n        lines[i] = m[0].substr(0, m[0].length - m[3].length);\n      }\n    }\n  }\n\n  return lines.join('\\n');\n}\n\nfunction load(str) {\n  errors = [];\n  reference_blocks = [];\n  processing_time = new Date().getTime();\n  var pre = preProcess(str);\n  var doc = parser(pre);\n  var res = semanticAnalysis(doc);\n  processing_time = new Date().getTime() - processing_time;\n\n  return res;\n}\n\nexport default load;\n","/**\n * Fork https://github.com/egoist/docute/blob/master/src/utils/front-matter.js\n */\n/* eslint-disable */\nimport parser from './yaml.js';\n\nconst optionalByteOrderMark = '\\\\ufeff?';\nconst pattern =\n  '^(' +\n  optionalByteOrderMark +\n  '(= yaml =|---)' +\n  '$([\\\\s\\\\S]*?)' +\n  '(?:\\\\2|\\\\.\\\\.\\\\.)' +\n  '$' +\n  '' +\n  '(?:\\\\n)?)';\n// NOTE: If this pattern uses the 'g' flag the `regex` variable definition will\n// need to be moved down into the functions that use it.\nconst regex = new RegExp(pattern, 'm');\n\nfunction extractor(string) {\n  string = string || '';\n\n  const lines = string.split(/(\\r?\\n)/);\n  if (lines[0] && /= yaml =|---/.test(lines[0])) {\n    return parse(string);\n  } else {\n    return { attributes: {}, body: string };\n  }\n}\n\nfunction parse(string) {\n  const match = regex.exec(string);\n\n  if (!match) {\n    return {\n      attributes: {},\n      body: string,\n    };\n  }\n\n  const yaml = match[match.length - 1].replace(/^\\s+|\\s+$/g, '');\n  const attributes = parser(yaml) || {};\n  const body = string.replace(match[0], '');\n\n  return { attributes: attributes, body: body, frontmatter: yaml };\n}\n\nexport default extractor;\n","import parser from './parser.js';\n\nconst install = function (hook, vm) {\n  // Used to remove front matter from embedded pages if installed.\n  vm.config.frontMatter = {};\n  vm.config.frontMatter.installed = true;\n  vm.config.frontMatter.parseMarkdown = function (content) {\n    const { body } = parser(content);\n    return body;\n  };\n\n  hook.beforeEach(content => {\n    const { attributes, body } = parser(content);\n\n    vm.frontmatter = attributes;\n\n    return body;\n  });\n};\n\nwindow.$docsify = window.$docsify || {};\n$docsify.plugins = [install, ...($docsify.plugins || [])];\n"],"names":["errors","reference_blocks","processing_time","regex","regLevel","RegExp","invalidLine","dashesString","quotesString","float","integer","array","map","key_value","single_key_value","key","item","trim","comment","Block","lvl","parent","length","level","lines","children","addChild","obj","this","push","processValue","val","m","replace","Number","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","match","parseFloat","parseInt","isNaN","Date","parse","res","count","c","content","str","j","lenJ","newRes","processFoldedBlock","block","chunks","join","i","len","processLiteralBlock","processBlock","blocks","currentObj","processedBlocks","isMap","line","value","nb","substr","shift","v","no","k","splice","call","semanticAnalysis","load","getTime","doc","split","curLevel","result","currentBlock","levels","exec","oldBlock","added","parser","src","r","preProcess","extractor","string","test","attributes","body","yaml","frontmatter","window","$docsify","plugins","hook","vm","config","frontMatter","installed","parseMarkdown","beforeEach"],"mappings":"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"}